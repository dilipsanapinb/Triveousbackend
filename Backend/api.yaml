openapi: 3.0.0
info:
  title: Node.js Ecommerce Backend API documentation
  description: Ecommerce API.
  version: 1.1.2
servers:
  - url: https://ecommercebackend-4diz.onrender.com/api-docs/
    description: Local server
  - url: https://ecommercebackend-4diz.onrender.com/api-docs/
    description: Pre production server
  - url: https://ecommercebackend-4diz.onrender.com/api-docs/
    description: Production server


securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
  RoleAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /:
    get:
      summary: This API is used to check if the GET method is working or not
      description: This API is used to verify whether the GET method is functioning correctly.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A welcome message

  # get all users
  /api/user/allusers:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      tags:
        - Users
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      responses:
        '200':
          description: A list of all users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier of the user.
                        firstname:
                          type: string
                          description: The first name of the user.
                        lastname:
                          type: string
                          description: The last name of the user.
                        email:
                          type: string
                          description: The email address of the user.
                        role:
                          type: string
                          description: The role of the user.
                        createdAt:
                          type: string
                          format: date-time
                          description: The timestamp when the user was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The timestamp when the user was last updated.
                example:
                  message: All users
                  users:
                    - _id: "64f18d870421d3e37e3c142d"
                      firstname: "Dilip"
                      lastname: "Sanap"
                      email: "dilipsanap@gmail.com"
                      role: "admin"
                      createdAt: "2023-09-01T07:06:47.490Z"
                      updatedAt: "2023-09-01T07:06:47.490Z"
                      # Add more user properties as needed.
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User does not have permission.
        '500':
          description: Internal server error. Something went wrong.

  # register the user
  /api/user/register:
    post:
      summary: Register a new user
      description: Register a new user with the provided details.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: The first name of the user.
                lastname:
                  type: string
                  description: The last name of the user.
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                password:
                  type: string
                  description: The password for the user.
                role:
                  type: string
                  description: The role of the user (e.g., "customer" or "admin").
              required:
                - firstname
                - lastname
                - email
                - password
                - role
      responses:
        '200':
          description: User registration successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  user:
                    type: object
                    properties:
                      firstname:
                        type: string
                        description: The first name of the registered user.
                      lastname:
                        type: string
                        description: The last name of the registered user.
                      email:
                        type: string
                        format: email
                        description: The email address of the registered user.
                      password:
                        type: string
                        description: The password of the registered user (hashed).
                      role:
                        type: string
                        description: The role of the registered user.
                      _id:
                        type: string
                        description: The unique identifier of the registered user.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the user was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the user was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                  # Add more user properties as needed.
                example:
                  message: User registration is successful.
                  user:
                    firstname: "Indu"
                    lastname: "Sanap"
                    email: "indusanap@gmail.com"
                    password: "$2b$10$2mKxyGtGD90EfBFl3KxX2.lCYp1wcs.puw8QfwpzGsY5y65qsIjJe"
                    role: "customer"
                    _id: "64f1ac02d35a74ccc2bb6037"
  
  # Login the user
  /api/user/login:
    post:
      summary: User login
      description: Log in a user with the provided credentials.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                password:
                  type: string
                  description: The password of the user.
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  accessToken:
                    type: string
                    description: JSON Web Token (JWT) for user authentication.
                  refreshToken:
                    type: string
                    description: JSON Web Token (JWT) for token refreshing.
                example:
                  message: Login Successful
                  accessToken: "your-access-token-here"
                  refreshToken: "your-refresh-token-here"
        '401':
          description: Unauthorized. Invalid credentials.
        '400':
          description: Bad request. Invalid request body.
        '500':
          description: Internal server error. Something went wrong during login.
  
  # Generate the refresh token
  /api/user/refreshtoken:
    get:
      summary: Refresh access token
      description: Generate a new access token using the provided refresh token.
      tags:
        - Users
      parameters:
        - name: refreshToken
          in: query
          required: true
          schema:
            type: string
          description: The refresh token used to generate a new access token.
      responses:
        '200':
          description: Access token refreshed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The newly generated access token.
                example:
                  accessToken: "your-new-access-token-here"
        '401':
          description: Unauthorized. Invalid refresh token.
        '500':
          description: Internal server error. Something went wrong during token refresh.

  # get all cateogories
  /api/category/allcategories:
    get:
      summary: Get all categories
      description: Retrieve a list of all product categories.
      tags:
        - Categories
      responses:
        '200':
          description: A list of all product categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  AllCategories:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier of the category.
                        name:
                          type: string
                          description: The name of the category.
                        createdAt:
                          type: string
                          format: date-time
                          description: The timestamp when the category was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The timestamp when the category was last updated.
                        __v:
                          type: integer
                          description: Version number (MongoDB-specific).
                example:
                  message: All Categories data
                  AllCategories:
                    - _id: "64f193c606e6a568a98f8138"
                      name: "Electronics"
                      createdAt: "2023-09-01T07:33:26.342Z"
                      updatedAt: "2023-09-01T07:33:26.342Z"
                      __v: 0
                    - _id: "64f193ed06e6a568a98f813c"
                      name: "Footware"
                      createdAt: "2023-09-01T07:34:05.866Z"
                      updatedAt: "2023-09-01T07:34:05.866Z"
                      __v: 0
                    # Add more category objects as needed.
        '500':
          description: Internal server error. Something went wrong while fetching categories.

  # get category by id;
  /api/category/{id}:
    get:
      summary: Get category by ID
      description: Retrieve a product category by its unique identifier.
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          description: The unique identifier of the category to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The requested category.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The unique identifier of the category.
                      name:
                        type: string
                        description: The name of the category.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                example:
                  message: Category found
                  category:
                    _id: "64f193e206e6a568a98f813a"
                    name: "Kitchen wares"
                    createdAt: "2023-09-01T07:33:54.324Z"
                    updatedAt: "2023-09-01T07:36:53.733Z"
                    __v: 0
        '404':
          description: Category not found.
        '500':
          description: Internal server error. Something went wrong while fetching the category.
  

  # Create the category
  /api/category/create:
    post:
      summary: Create a category
      description: Create a new product category with the provided name.
      tags:
        - Categories
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the category to create.
              required:
                - name
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  category:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the created category.
                      _id:
                        type: string
                        description: The unique identifier of the created category.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                example:
                  message: Successfully created a category
                  category:
                    name: "Stationary"
                    _id: "64f1940e06e6a568a98f8142"
                    createdAt: "2023-09-01T07:34:38.210Z"
                    updatedAt: "2023-09-01T07:34:38.210Z"
                    __v: 0
        '400':
          description: Bad request. Category name is required.
        '500':
          description: Internal server error. Something went wrong while creating the category.


  # edit the category
  /api/category/edit/{id}:
    patch:
      summary: Edit a category
      description: Update the name of an existing category.
      tags:
        - Categories
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the category to edit.
          schema:
            type: string
        - in: body
          name: category
          description: The updated category name.
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: The new name for the category.
              # Add other properties if needed.
          example:
            name: "Updated Category Name"
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The unique identifier of the updated category.
                      name:
                        type: string
                        description: The updated name of the category.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                example:
                  message: Category updated successfully
                  category:
                    _id: "64f193e206e6a568a98f813a"
                    name: "Updated Category Name"
                    createdAt: "2023-09-01T07:33:54.324Z"
                    updatedAt: "2023-09-01T07:36:53.733Z"
                    __v: 0
        '404':
          description: Category not found.
        '500':
          description: Internal server error. Something went wrong while updating the category.
  

  # delete category by id
  /api/category/delete/{id}:
    delete:
      summary: Delete a category
      description: Delete a category by its ID.
      tags:
        - Categories
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the category to delete.
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                example:
                  message: Category deleted successfully
        '404':
          description: Category not found.
        '500':
          description: Internal server error. Something went wrong while deleting the category.
  
  # get all products
  /api/product/allproducts:
    get:
      summary: Get all products
      description: Retrieve a list of all products.
      tags:
        - Products
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
              example:
                message: All Products Data
                products:
                  - _id: "64f1ab5409002339ce703032"
                    title: "trimmer 220"
                    description: "Stainless steel trimmer"
                    price: 1500
                    image: "abc.example.jpg"
                    color: "black"
                    ratings:
                      - star: 9
                        ratedBy: "64f1ab5409002339ce703033"
                    availability: true
                    brand: "Philips"
                    category: "64f193c606e6a568a98f8138"
                    createdAt: "2023-09-01T09:13:56.723Z"
                    updatedAt: "2023-09-01T09:13:56.723Z"
                    __v: 0
                  - _id: "64f1c27d2437fb2631459523"
                    title: "trimmer 220"
                    description: "Stainless steel trimmer"
                    price: 1500
                    image: "abc.example.jpg"
                    color: "black"
                    ratings:
                      - star: 9
                        ratedBy: "64f1ac02d35a74ccc2bb6037"
                    availability: true
                    brand: "Philips"
                    category: "64f193c606e6a568a98f8138"
                    createdAt: "2023-09-01T10:52:45.345Z"
                    updatedAt: "2023-09-01T10:52:45.345Z"
                    __v: 0
                  - _id: "64f1fca46b80a1f12a7a1138"
                    title: "trimmer 800"
                    description: "Stainless steel trimmer"
                    price: 1500
                    image: "abc.example.jpg"
                    color: "black"
                    ratings:
                      - star: 9
                        ratedBy: "64f1ac02d35a74ccc2bb6037"
                    availability: true
                    brand: "Philips"
                    category: "64f193c606e6a568a98f8138"
                    createdAt: "2023-09-01T15:00:52.705Z"
                    updatedAt: "2023-09-01T15:00:52.705Z"
                    __v: 0
  
  # get product by id
  /api/product/{id}:
    get:
      summary: Get a product by ID
      description: Retrieve product details by its unique identifier.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the product to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Product details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          example:
            message: Product found
            product:
              $ref: '#/components/examples/ProductExample'
        '404':
          description: Product not found.
        '500':
          description: Internal server error. Something went wrong while fetching the product.
  
  # create the product
  /api/product/create:
    post:
      summary: Create a product
      description: Create a new product with the provided details.
      tags:
        - Products
      security:
        - BearerAuth: []
        - RoleAuth: ['admin', 'retailer']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequest'
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          example:
            message: Product created successfully
            product:
              $ref: '#/components/examples/ProductExample'
        '500':
          description: Internal server error. Something went wrong while creating the product

  # edit the product
  /api/product/edit/{id}:
    patch:
      summary: Edit product details
      description: Update the details of an existing product.
      tags:
        - Products
      security:
        - BearerAuth: []
        - RoleAuth: ['admin', 'retailer']
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the product to edit.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductEditRequest'
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          example:
            message: Product updated successfully
            updatedProduct:
              $ref: '#/components/examples/ProductExample'
        '404':
          description: Product not found.
        '500':
          description: Internal server error. Something went wrong while editing the product.

  # delete the product bu id
  /api/product/delete/{id}:
    delete:
      summary: Delete a product
      description: Delete a product by its unique identifier.
      tags:
        - Products
      security:
        - BearerAuth: []
        - RoleAuth: ['admin', 'retailer']
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the product to delete.
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully.
        '404':
          description: Product not found.
        '500':
          description: Internal server error. Something went wrong while deleting the product.
  
  # get all cart items
  /api/cart/{id}/all:
    get:
      summary: Get all items from a user's cart
      description: Retrieve all items from a user's cart based on their userId.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the user.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: string
                          description: The unique identifier of the product in the cart.
                        count:
                          type: integer
                          description: The quantity of this product in the cart.
                        _id:
                          type: string
                          description: The unique identifier of the cart item.
        '404':
          description: Cart not found.
        '500':
          description: Internal server error. Something went wrong while fetching the cart.

  # add to the cart
  /api/cart/add:
    post:
      summary: Add a product to the user's cart
      description: Add a product to the user's cart with the provided details.
      tags:
        - Cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToCartRequest'
      responses:
        '200':
          description: Product added to cart successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCart'
          example:
            message: Product added to cart
            cart:
              $ref: '#/components/examples/UserCartExample'
        '500':
          description: Internal server error. Something went wrong while adding to the cart.
  
  # delete the item from cart
  /api/cart/delete/{productId}:
    delete:
      summary: Delete a product from the user's cart
      description: Delete a product from the user's cart by its unique identifier.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The unique identifier of the product to delete from the cart.
      responses:
        '200':
          description: Product deleted from cart successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCart'
          example:
            message: Item deleted from cart
            cart:
              $ref: '#/components/examples/UserCartExample'
        '404':
          description: Product not found in the cart.
        '500':
          description: Internal server error. Something went wrong while deleting the cart.

  # increase the quantity
  /api/cart/increase/{productId}:
    patch:
      summary: Increase the quantity of a product in the user's cart
      description: Increase the quantity of a product in the user's cart by its unique identifier.
      tags:
        - Cart
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The unique identifier of the product to increase the quantity.
      responses:
        '200':
          description: Product quantity increased in the cart successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCart'
          example:
            message: Product quantity increased in the cart
            cart:
              $ref: '#/components/examples/UserCartExample'
        '404':
          description: Product not found in the cart.
        '500':
          description: Internal server error. Something went wrong while increasing the quantity.
  
  # place order
  /api/order/place-order:
    post:
      summary: Place an order
      description: Place an order using the items from the user's cart.
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceOrderRequest'
      responses:
        '201':
          description: Order placed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          example:
            message: Order placed successfully
            order:
              $ref: '#/components/examples/OrderExample'
        '400':
          description: Cart is empty.
        '500':
          description: Internal server error. Something went wrong while placing the order.

  # order history
  /api/order/order-history:
    get:
      summary: Get order history
      description: Retrieve the order history of a user.
      tags:
        - Orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderHistoryResponse'
          example:
            message: Order history
            orders:
              - $ref: '#/components/examples/OrderExample'
        '500':
          description: Internal server error. Something went wrong while fetching order history.
  
  # get order by id
  /api/order/{orderId}:
    get:
      summary: Get order details by ID
      description: Retrieve the details of an order by its unique identifier.
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: The unique identifier of the order to fetch.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          example:
            message: Order details fetch successfully
            order:
              $ref: '#/components/examples/OrderExample'
        '404':
          description: Order not found.
        '500':
          description: Internal server error. Something went wrong while fetching order details by ID.

  
  # Change the status by id
  /api/order/change-status/{orderId}:
    patch:
      summary: Change order status
      description: Update the status of an order by its unique identifier.
      tags:
        - Orders
      security:
        - BearerAuth: []
        - RoleAuth: ['admin', 'retailer']
      parameters:
        - name: orderId
          in: path
          required: true
          description: The unique identifier of the order to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: The updated status of the order.
              required:
                - status
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          example:
            message: Status updated successfully
            order:
              $ref: '#/components/examples/OrderExample'
        '404':
          description: Order not found.
        '500':
          description: Internal server error. Something went wrong while updating the order status.
components:
  schemas:
    OrderHistoryResponse:
      type: object
      properties:
        message:
          type: string
          description: A success message.
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          description: The list of orders in the order history.
    PlaceOrderRequest:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier of the user placing the order.
      required:
        - userId
    Order:
      type: object
      properties:
        user:
          type: string
          description: The unique identifier of the user who placed the order.
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          description: The list of items in the order.
        status:
          type: string
          description: The status of the order.
        orderTotal:
          type: integer
          description: The total cost of the order.
        _id:
          type: string
          description: The unique identifier of the order.
        orderDate:
          type: string
          format: date-time
          description: The timestamp when the order was placed.
        __v:
          type: integer
          description: Version number (MongoDB-specific).
    CartItem:
      type: object
      properties:
        product:
          type: string
          description: The unique identifier of the product in the cart.
        count:
          type: integer
          description: The quantity of this product in the cart.
        _id:
          type: string
          description: The unique identifier of the cart item.
    
    AddToCartRequest:
      type: object
      properties:
        productId:
          type: string
          description: The unique identifier of the product to add to the cart.
        count:
          type: integer
          description: The quantity of the product to add to the cart.
      required:
        - productId
        - count

    UserCart:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the cart.
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          description: The list of products in the cart.
        orderBy:
          type: string
          description: The unique identifier of the user who owns the cart.
        cartTotal:
          type: integer
          description: The total cost of the items in the cart.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the cart was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the cart was last updated.
        __v:
          type: integer
          description: Version number (MongoDB-specific).
  
  
  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: The unique identifier of the user.

    ProductCreateRequest:
      type: object
      properties:
        title:
          type: string
          description: The title of the product.
        description:
          type: string
          description: A description of the product.
        price:
          type: number
          description: The price of the product.
        image:
          type: string
          description: URL to the product image.
        color:
          type: string
          description: The color of the product.
        ratings:
          type: array
          description: Array of rating objects.
          items:
            type: object
            properties:
              star:
                type: integer
                description: The star rating given by users.
              ratedBy:
                type: string
                description: The unique identifier of the user who rated the product.
        availability:
          type: boolean
          description: Indicates if the product is available.
        brand:
          type: string
          description: The brand of the product.
        category:
          type: string
          description: The category to which the product belongs.
      required:
        - title
        - description
        - price
        - image
        - color
        - ratings
        - availability
        - brand
        - category

    ProductEditRequest:
      type: object
      properties:
        title:
          type: string
          description: The updated title of the product.
        description:
          type: string
          description: The updated description of the product.
        price:
          type: number
          description: The updated price of the product.
        image:
          type: string
          description: URL to the updated product image.
        color:
          type: string
          description: The updated color of the product.
        ratings:
          type: array
          description: Updated array of rating objects.
          items:
            type: object
            properties:
              star:
                type: integer
                description: The updated star rating given by users.
              ratedBy:
                type: string
                description: The unique identifier of the user who rated the product.
        availability:
          type: boolean
          description: Indicates if the product is available.
        brand:
          type: string
          description: The updated brand of the product.
        category:
          type: string
          description: The updated category to which the product belongs.

  examples:

    ProductExample:
      title: "trimmer 800"
      description: "Stainless steel trimmer"
      price: 1500
      image: "abc.example.jpg"
      color: "black"
      ratings:
        - star: 9
          ratedBy: "64f1ac02d35a74ccc2bb6037"
      availability: true
      brand: "Philips"
      category: "64f193c606e6a568a98f8138"
      _id: "64f1fca46b80a1f12a7a1138"
      createdAt: "2023-09-01T15:00:52.705Z"
      updatedAt: "2023-09-01T15:00:52.705Z"
      __v: 0
    
    UserCartExample:
      _id: "64f1c329fbd718e694cd2a7f"
      products:
        - product: "64f1fca46b80a1f12a7a1138"
          count: 2
          _id: "64f1fcee6b80a1f12a7a113e"
      orderBy: "64f18d870421d3e37e3c142d"
      cartTotal: 3000
      createdAt: "2023-09-01T10:55:38.088Z"
      updatedAt: "2023-09-01T15:02:06.753Z"
      __v: 3

    # order example
    OrderExample:
      user: "64f18d870421d3e37e3c142d"
      items:
        - product: "64f1c27d2437fb2631459523"
          count: 2
          _id: "64f1e90e7ad2c8639a9c6ffa"
      status: "Order placed"
      orderTotal: 3000
      _id: "64f1e9d46208106810d332b4"
      orderDate: "2023-09-01T13:40:36.457Z"
      __v: 0
    
    # product example
    Product:
      type: object
      properties:
        title:
          type: string
          description: The title of the product.
        description:
          type: string
          description: A description of the product.
        price:
          type: number
          description: The price of the product.
        image:
          type: string
          description: URL to the product image.
        color:
          type: string
          description: The color of the product.
        ratings:
          type: array
          description: Array of rating objects.
          items:
            type: object
            properties:
              star:
                type: integer
                description: The star rating given by users.
              ratedBy:
                type: string
                description: The unique identifier of the user who rated the product.
        availability:
          type: boolean
          description: Indicates if the product is available.
        brand:
          type: string
          description: The brand of the product.
        category:
          type: string
          description: The category to which the product belongs.
        _id:
          type: string
          description: The unique identifier of the product.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the product was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the product was last updated.
        __v:
          type: integer
          description: Version number (MongoDB-specific).
    

    # order hisrory
    OrderExample:
      _id: "64f1e9d46208106810d332b4"
      user: "64f18d870421d3e37e3c142d"
      items:
        - product: "64f1c27d2437fb2631459523"
          count: 2
          _id: "64f1e90e7ad2c8639a9c6ffa"
      status: "Order placed"
      orderTotal: 3000
      orderDate: "2023-09-01T13:40:36.457Z"
      __v: 0
    
    # order example
    OrderExample:
      _id: "64f1e9d46208106810d332b4"
      user: "64f18d870421d3e37e3c142d"
      items:
        - product: "64f1c27d2437fb2631459523"
          count: 2
          _id: "64f1e90e7ad2c8639a9c6ffa"
      status: "Order placed"
      orderTotal: 3000
      orderDate: "2023-09-01T13:40:36.457Z"
    

    # OrderExample:
      _id: "64f1e9d46208106810d332b4"
      user: "64f18d870421d3e37e3c142d"
      items:
        - product: "64f1c27d2437fb2631459523"
          count: 2
          _id: "64f1e90e7ad2c8639a9c6ffa"
      status: "Dispatched"
      orderTotal: 3000
      orderDate: "2023-09-01T13:40:36.457Z"
      __v: 0
  



