openapi: 3.0.0
info:
  title: Node.js Ecommerce Backend API documentation
  description: Ecommerce API.
  version: 1.1.2
servers:
  - url: http://localhost:8000/
    description: Local server
  - url: http://prod.com/
    description: Pre production server
  - url: http://test.com/
    description: Production server


securitySchemes:
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
  RoleAuth:
    type: apiKey
    name: Authorization
    in: header

paths:
  /:
    get:
      summary: This API is used to check if the GET method is working or not
      description: This API is used to verify whether the GET method is functioning correctly.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A welcome message

  # get all users
  /api/user/allusers:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      tags:
        - Users
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      responses:
        '200':
          description: A list of all users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier of the user.
                        firstname:
                          type: string
                          description: The first name of the user.
                        lastname:
                          type: string
                          description: The last name of the user.
                        email:
                          type: string
                          description: The email address of the user.
                        role:
                          type: string
                          description: The role of the user.
                        createdAt:
                          type: string
                          format: date-time
                          description: The timestamp when the user was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The timestamp when the user was last updated.
                example:
                  message: All users
                  users:
                    - _id: "64f18d870421d3e37e3c142d"
                      firstname: "Dilip"
                      lastname: "Sanap"
                      email: "dilipsanap@gmail.com"
                      role: "admin"
                      createdAt: "2023-09-01T07:06:47.490Z"
                      updatedAt: "2023-09-01T07:06:47.490Z"
                      # Add more user properties as needed.
        '401':
          description: Unauthorized. User is not authenticated.
        '403':
          description: Forbidden. User does not have permission.
        '500':
          description: Internal server error. Something went wrong.

  # register the user
  /api/user/register:
    post:
      summary: Register a new user
      description: Register a new user with the provided details.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  description: The first name of the user.
                lastname:
                  type: string
                  description: The last name of the user.
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                password:
                  type: string
                  description: The password for the user.
                role:
                  type: string
                  description: The role of the user (e.g., "customer" or "admin").
              required:
                - firstname
                - lastname
                - email
                - password
                - role
      responses:
        '200':
          description: User registration successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  user:
                    type: object
                    properties:
                      firstname:
                        type: string
                        description: The first name of the registered user.
                      lastname:
                        type: string
                        description: The last name of the registered user.
                      email:
                        type: string
                        format: email
                        description: The email address of the registered user.
                      password:
                        type: string
                        description: The password of the registered user (hashed).
                      role:
                        type: string
                        description: The role of the registered user.
                      _id:
                        type: string
                        description: The unique identifier of the registered user.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the user was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the user was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                  # Add more user properties as needed.
                example:
                  message: User registration is successful.
                  user:
                    firstname: "Indu"
                    lastname: "Sanap"
                    email: "indusanap@gmail.com"
                    password: "$2b$10$2mKxyGtGD90EfBFl3KxX2.lCYp1wcs.puw8QfwpzGsY5y65qsIjJe"
                    role: "customer"
                    _id: "64f1ac02d35a74ccc2bb6037"
  
  # Login the user
  /api/user/login:
    post:
      summary: User login
      description: Log in a user with the provided credentials.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                password:
                  type: string
                  description: The password of the user.
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  accessToken:
                    type: string
                    description: JSON Web Token (JWT) for user authentication.
                  refreshToken:
                    type: string
                    description: JSON Web Token (JWT) for token refreshing.
                example:
                  message: Login Successful
                  accessToken: "your-access-token-here"
                  refreshToken: "your-refresh-token-here"
        '401':
          description: Unauthorized. Invalid credentials.
        '400':
          description: Bad request. Invalid request body.
        '500':
          description: Internal server error. Something went wrong during login.
  
  # Generate the refresh token
  /api/user/refreshtoken:
    get:
      summary: Refresh access token
      description: Generate a new access token using the provided refresh token.
      tags:
        - Users
      parameters:
        - name: refreshToken
          in: query
          required: true
          schema:
            type: string
          description: The refresh token used to generate a new access token.
      responses:
        '200':
          description: Access token refreshed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: The newly generated access token.
                example:
                  accessToken: "your-new-access-token-here"
        '401':
          description: Unauthorized. Invalid refresh token.
        '500':
          description: Internal server error. Something went wrong during token refresh.

  # get all cateogories
  /api/category/allcategories:
    get:
      summary: Get all categories
      description: Retrieve a list of all product categories.
      tags:
        - Categories
      responses:
        '200':
          description: A list of all product categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  AllCategories:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier of the category.
                        name:
                          type: string
                          description: The name of the category.
                        createdAt:
                          type: string
                          format: date-time
                          description: The timestamp when the category was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The timestamp when the category was last updated.
                        __v:
                          type: integer
                          description: Version number (MongoDB-specific).
                example:
                  message: All Categories data
                  AllCategories:
                    - _id: "64f193c606e6a568a98f8138"
                      name: "Electronics"
                      createdAt: "2023-09-01T07:33:26.342Z"
                      updatedAt: "2023-09-01T07:33:26.342Z"
                      __v: 0
                    - _id: "64f193ed06e6a568a98f813c"
                      name: "Footware"
                      createdAt: "2023-09-01T07:34:05.866Z"
                      updatedAt: "2023-09-01T07:34:05.866Z"
                      __v: 0
                    # Add more category objects as needed.
        '500':
          description: Internal server error. Something went wrong while fetching categories.

  # get category by id;
  /api/category/{id}:
    get:
      summary: Get category by ID
      description: Retrieve a product category by its unique identifier.
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          description: The unique identifier of the category to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: The requested category.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The unique identifier of the category.
                      name:
                        type: string
                        description: The name of the category.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                example:
                  message: Category found
                  category:
                    _id: "64f193e206e6a568a98f813a"
                    name: "Kitchen wares"
                    createdAt: "2023-09-01T07:33:54.324Z"
                    updatedAt: "2023-09-01T07:36:53.733Z"
                    __v: 0
        '404':
          description: Category not found.
        '500':
          description: Internal server error. Something went wrong while fetching the category.
  

  # Create the category
  /api/category/create:
    post:
      summary: Create a category
      description: Create a new product category with the provided name.
      tags:
        - Categories
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the category to create.
              required:
                - name
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  category:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the created category.
                      _id:
                        type: string
                        description: The unique identifier of the created category.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                example:
                  message: Successfully created a category
                  category:
                    name: "Stationary"
                    _id: "64f1940e06e6a568a98f8142"
                    createdAt: "2023-09-01T07:34:38.210Z"
                    updatedAt: "2023-09-01T07:34:38.210Z"
                    __v: 0
        '400':
          description: Bad request. Category name is required.
        '500':
          description: Internal server error. Something went wrong while creating the category.


  # edit the category
  /api/category/edit/{id}:
    patch:
      summary: Edit a category
      description: Update the name of an existing category.
      tags:
        - Categories
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the category to edit.
          schema:
            type: string
        - in: body
          name: category
          description: The updated category name.
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: The new name for the category.
              # Add other properties if needed.
          example:
            name: "Updated Category Name"
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  category:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The unique identifier of the updated category.
                      name:
                        type: string
                        description: The updated name of the category.
                      createdAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was created.
                      updatedAt:
                        type: string
                        format: date-time
                        description: The timestamp when the category was last updated.
                      __v:
                        type: integer
                        description: Version number (MongoDB-specific).
                example:
                  message: Category updated successfully
                  category:
                    _id: "64f193e206e6a568a98f813a"
                    name: "Updated Category Name"
                    createdAt: "2023-09-01T07:33:54.324Z"
                    updatedAt: "2023-09-01T07:36:53.733Z"
                    __v: 0
        '404':
          description: Category not found.
        '500':
          description: Internal server error. Something went wrong while updating the category.
  

  # delete category by id
  /api/category/delete/{id}:
    delete:
      summary: Delete a category
      description: Delete a category by its ID.
      tags:
        - Categories
      security:
        - BearerAuth: []
        - RoleAuth: ['admin']
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the category to delete.
          schema:
            type: string
      responses:
        '200':
          description: Category deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                example:
                  message: Category deleted successfully
        '404':
          description: Category not found.
        '500':
          description: Internal server error. Something went wrong while deleting the category.
  

  # get all products list
  /api/product/allproducts:
    get:
      summary: Get all products
      description: Retrieve a list of all products.
      tags:  # Note: Change 'tag' to 'tags'
        - Products
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A success message.
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The unique identifier of the product.
                        title:
                          type: string
                          description: The title of the product.
                        description:
                          type: string
                          description: A description of the product.
                        price:
                          type: number
                          description: The price of the product.
                        image:
                          type: string
                          description: URL to the product image.
                        color:
                          type: string
                          description: The color of the product.
                        ratings:
                          type: array
                          description: Array of rating objects.
                          items:
                            type: object
                            properties:
                              star:
                                type: integer
                                description: The star rating given by users.
                              ratedBy:
                                type: string
                                description: The unique identifier of the user who rated the product.
                        availability:
                          type: boolean
                          description: Indicates if the product is available.
                        brand:
                          type: string
                          description: The brand of the product.
                        category:
                          type: string
                          description: The category to which the product belongs.
                        createdAt:
                          type: string
                          format: date-time
                          description: The timestamp when the product was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The timestamp when the product was last updated.
                        __v:
                          type: integer
                          description: Version number (MongoDB-specific).
              example:
                message: All Products Data
                products:
                  - _id: "64f1ab5409002339ce703032"
                    title: "trimmer 220"
                    description: "Stainless steel trimmer"
                    price: 1500
                    image: "abc.example.jpg"
                    color: "black"
                    ratings:
                      - star: 9
                        ratedBy: "64f1ab5409002339ce703033"
                    availability: true
                    brand: "Philips"
                    category: "64f193c606e6a568a98f8138"
                    createdAt: "2023-09-01T09:13:56.723Z"
                    updatedAt: "2023-09-01T09:13:56.723Z"
                    __v: 0
                  - _id: "64f1c27d2437fb2631459523"
                    title: "trimmer 220"
                    description: "Stainless steel trimmer"
                    price: 1500
                    image: "abc.example.jpg"
                    color: "black"
                    ratings:
                      - star: 9
                        ratedBy: "64f1ac02d35a74ccc2bb6037"
                    availability: true
                    brand: "Philips"
                    category: "64f193c606e6a568a98f8138"
                    createdAt: "2023-09-01T10:52:45.345Z"
                    updatedAt: "2023-09-01T10:52:45.345Z"
                    __v: 0
                  - _id: "64f1fca46b80a1f12a7a1138"
                    title: "trimmer 800"
                    description: "Stainless steel trimmer"
                    price: 1500
                    image: "abc.example.jpg"
                    color: "black"
                    ratings:
                      - star: 9
                        ratedBy: "64f1ac02d35a74ccc2bb6037"
                    availability: true
                    brand: "Philips"
                    category: "64f193c606e6a568a98f8138"
                    createdAt: "2023-09-01T15:00:52.705Z"
                    updatedAt: "2023-09-01T15:00:52.705Z"
                    __v: 0